#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Ivan Vladimir Meza Ruiz 2018
# GPL 3.0

# imports
import faulthandler

faulthandler.enable(all_threads=True)
import click
from click_option_group import optgroup
import sys
import configparser
import os.path

# local imports
from .conversation import Conversation
from .config import set_config, get_config
from .audio import audio_close, audio_devices, list_voices

# Main service
config = configparser.ConfigParser()
CONFIG_SECTION = "DEFAULT"


@click.group()
@click.option("--config-filename", type=click.Path(), default="config.ini")
@click.option("--config-section", type=str, default="DEFAULT")
@click.option("-v", "--verbose", is_flag=True, help="Verbose mode [%(default)s]")
@click.pass_context
def chatvoice(
    ctx, config_filename="config.ini", config_section="DEFAULT", verbose=False
):
    global config
    global CONFIG_SECTION
    section = "DEFAULT"
    ctx.ensure_object(dict)
    if os.path.exists(config_filename):
        config.read(config_filename)
    if config_section in config:
        section = config_section
    CONFIG_SECTION = section
    ctx.obj["config"] = config
    ctx.obj["config_section"] = section
    ctx.obj["verbose"] = verbose


@chatvoice.command()
@click.option("--conversation-file", type=click.Path(exists=True))
@click.option("--print-config", type=str, is_flag=True, help="Print values of config")
@click.option("--devices", is_flag=True, help="List audio devices")
@click.option("--local-tts-voices", is_flag=True, help="List voices from local TTS")
@click.option(
    "--google-tts-languages", is_flag=True, help="List languages for google languages"
)
@click.pass_context
def info(
    ctx,
    conversation_file,
    devices,
    print_config,
    local_tts_voices,
    google_tts_languages,
):
    """Print information fo the system"""
    if devices:
        print(audio_devices())
    if print_config:
        for sec in config:
            print(f"[{sec}]")
            for key, val in config[sec].items():
                print(f"{key}={val}")
            print()
    if local_tts_voices:
        list_voices(engine="local")
    if google_tts_languages:
        list_voices(engine="google")


@chatvoice.command()
@click.argument("conversation-file", type=click.Path(exists=True))
@optgroup.group("Paths", help="Paths to auxiliary files")
@optgroup.option(
    "--audios-dir",
    default=config.get(CONFIG_SECTION, "audios_dir", fallback="audios"),
    type=click.Path(),
    help="Prefix directory for audios [audios]",
)
@optgroup.option(
    "--speech-recognition-dir",
    default=config.get(
        CONFIG_SECTION, "speech_recognition_dir", fallback="speech_recognition"
    ),
    type=click.Path(),
    help="Directory for audios for speech recognition [speech_recognition]",
)
@optgroup.option(
    "--tts-dir",
    default=config.get(CONFIG_SECTION, "tts_dir", fallback="tts"),
    type=click.Path(),
    help="Directory for audios for tts [tts]",
)
@optgroup.option(
    "--is-filename",
    default=config.get(CONFIG_SECTION, "is_filename", fallback="is.json"),
    type=click.Path(),
    help="File to save the Information State (remember) filename [is.json]",
)
@optgroup.option(
    "--audio-tts-db",
    default=config.get(CONFIG_SECTION, "audio_tts_db", fallback="audios_tts.tinydb"),
    type=click.Path(),
    help="File to store information about the audios generated by the tts [audios_tts.tinydb]",
)
@optgroup.group("Conversation", help="Conversation files")
@optgroup.option(
    "--generate-all-tts",
    default=config.get(CONFIG_SECTION, "generate_all_tts", fallback=False),
    is_flag=True,
    help="During tts generate all audios, do not use the database [False]",
)
@optgroup.option(
    "--remember-all",
    default=config.get(CONFIG_SECTION, "remember_all", fallback=False),
    is_flag=True,
    help="Remember all slots from conversation [True]",
)
@optgroup.option(
    "--erase_memory",
    default=config.get(CONFIG_SECTION, "erase_memory", fallback=False),
    is_flag=True,
    help="Erase memory [True]",
)
@optgroup.group("Speech", help="Options to control speech processing [%(default)s]")
@optgroup.option(
    "--speech-recognition",
    default=config.getboolean(CONFIG_SECTION, "speech_recognition", fallback=False),
    is_flag=True,
    help="**DEACTIVATED** Activate speech recognition [True]",
)
@optgroup.option(
    "--tts",
    default=config.getboolean(CONFIG_SECTION, "tts", fallback=None),
    type=click.Choice(["local", "google"], case_sensitive=False),
    help="Select the tts to use [None]",
)
@optgroup.option(
    "--local-tts-voice",
    default=config.get(CONFIG_SECTION, "local_tts_voice", fallback="spanish-latin-am"),
    type=str,
    help="Use espeak local tts [spanish-latin-am]",
)
@optgroup.option(
    "--google-tts-language",
    default=config.get(CONFIG_SECTION, "google_tts_langage", fallback="es-us"),
    type=str,
    help="Use espeak local tts [es-us]",
)
@optgroup.group("Audio", help="Options to control audio")
@optgroup.option(
    "--samplerate",
    type=int,
    default=config.getint(CONFIG_SECTION, "samplerate", fallback=48000),
    help="Samplerate [%(default)s]",
)
@optgroup.option(
    "--num-channels",
    type=int,
    default=config.getint(CONFIG_SECTION, "num-channels", fallback=2),
    help="Number of channels microphone [2]",
)
@optgroup.option(
    "--device",
    default=config.getint(CONFIG_SECTION, "device", fallback=None),
    type=int,
    help="Device number to connect audio [None]",
)
@optgroup.option(
    "--aggressiveness",
    default=config.getint(CONFIG_SECTION, "aggressiveness", fallback=None),
    is_flag=True,
    help="VAD aggressiveness [None]",
)
@click.pass_context
def console(ctx, conversation_file=None, **args):
    """Lauches a chatvoice for console"""
    CONFIG = dict(config[ctx.obj["config_section"]])
    CONFIG.update(args)
    CONFIG["main_path"] = os.path.dirname(conversation_file)
    CONFIG["verbose"] = ctx.obj["verbose"]
    # Temporarily not working
    CONFIG["speech_recognition"] = False

    # Main conversation
    conversation = Conversation(filename=conversation_file, **CONFIG)

    conversation.execute()


@chatvoice.command()
@click.argument(
    "conversations-dir", type=click.Path(exists=True), default="conversations"
)
@optgroup.group("Server", help="Server configuration")
@optgroup.option(
    "--host",
    default=config.get(CONFIG_SECTION, "host", fallback="0.0.0.0"),
    type=str,
    help="IP for service [0.0.0.0]",
)
@optgroup.option(
    "--port",
    default=config.get(CONFIG_SECTION, "host", fallback=5000),
    type=int,
    help="Port url [5000]",
)
@optgroup.option(
    "--reload",
    default=config.get(CONFIG_SECTION, "reload", fallback=False),
    is_flag=True,
    help="Reload webservice uvicorn[False]",
)
@optgroup.option(
    "--workers",
    default=config.get(CONFIG_SECTION, "workers", fallback=4),
    type=int,
    help="Number of workers for uvicorn[4]",
)
@optgroup.group("Paths", help="Paths to auxiliary files")
@optgroup.option(
    "--audios-dir",
    default=config.get(CONFIG_SECTION, "audios_dir", fallback="audios"),
    type=click.Path(),
    help="Prefix directory for audios [audios]",
)
@optgroup.option(
    "--speech-recognition-dir",
    default=config.get(
        CONFIG_SECTION, "speech_recognition_dir", fallback="speech_recognition"
    ),
    type=click.Path(),
    help="Directory for audios for speech recognition [speech_recognition]",
)
@optgroup.option(
    "--tts-dir",
    default=config.get(CONFIG_SECTION, "tts_dir", fallback="tts"),
    type=click.Path(),
    help="Directory for audios for tts [tts]",
)
@optgroup.option(
    "--is-filename",
    default=config.get(CONFIG_SECTION, "is_filename", fallback="is.json"),
    type=click.Path(),
    help="File to save the Information State (remember) filename [is.json]",
)
@optgroup.option(
    "--audio-tts-db",
    default=config.get(CONFIG_SECTION, "audio_tts_db", fallback="audios_tts.tinydb"),
    type=click.Path(),
    help="File to store information about the audios generated by the tts [audios_tts.tinydb]",
)
@optgroup.group("Conversation", help="Conversation files")
@optgroup.option(
    "--generate-all-tts",
    default=config.get(CONFIG_SECTION, "generate_all_tts", fallback=False),
    is_flag=True,
    help="During tts generate all audios, do not use the database [False]",
)
@optgroup.option(
    "--remember-all",
    default=config.get(CONFIG_SECTION, "remember_all", fallback=False),
    is_flag=True,
    help="Remember all slots from conversation [True]",
)
@optgroup.option(
    "--erase_memory",
    default=config.get(CONFIG_SECTION, "erase_memory", fallback=False),
    is_flag=True,
    help="Erase memory [True]",
)
@optgroup.group("Speech", help="Options to control speech processing [%(default)s]")
@optgroup.option(
    "--speech-recognition",
    default=config.getboolean(CONFIG_SECTION, "speech_recognition", fallback=False),
    is_flag=True,
    help="**DEACTIVATED** Activate speech recognition [True]",
)
@optgroup.option(
    "--tts",
    default=config.getboolean(CONFIG_SECTION, "tts", fallback=None),
    type=click.Choice(["local", "google"], case_sensitive=False),
    help="Select the tts to use [None]",
)
@optgroup.option(
    "--local-tts-voice",
    default=config.get(CONFIG_SECTION, "local_tts_voice", fallback="spanish-latin-am"),
    type=str,
    help="Use espeak local tts [spanish-latin-am]",
)
@optgroup.option(
    "--google-tts-language",
    default=config.get(CONFIG_SECTION, "google_tts_langage", fallback="es-us"),
    type=str,
    help="Use espeak local tts [es-us]",
)
@optgroup.group("Audio", help="Options to control audio")
@optgroup.option(
    "--samplerate",
    type=int,
    default=config.getint(CONFIG_SECTION, "samplerate", fallback=48000),
    help="Samplerate [%(default)s]",
)
@optgroup.option(
    "--num-channels",
    type=int,
    default=config.getint(CONFIG_SECTION, "num-channels", fallback=2),
    help="Number of channels microphone [2]",
)
@optgroup.option(
    "--device",
    default=config.getint(CONFIG_SECTION, "device", fallback=None),
    type=int,
    help="Device number to connect audio [None]",
)
@optgroup.option(
    "--aggressiveness",
    default=config.getint(CONFIG_SECTION, "aggressiveness", fallback=None),
    is_flag=True,
    help="VAD aggressiveness [None]",
)
@click.pass_context
def server(ctx, conversations_dir, **args):
    """Lauches a chatvoice for console"""
    global CONFIG
    import threading
    import uvicorn

    CONFIG = dict(config[ctx.obj["config_section"]])
    CONFIG.update(args)
    CONFIG = dict(args)
    CONFIG["verbose"] = ctx.obj["verbose"]
    CONFIG["conversations_dir"] = conversations_dir
    # Temporarily speech recognition not working
    CONFIG["speech_recognition"] = False
    set_config(**CONFIG)

    # Main conversation
    # conversation = Conversation(
    #        filename=ctx.obj["conversation_file"],
    #        **CONFIG)

    # Thread for conversation
    # t = threading.Thread(target=conversation.execute)
    # conversation.set_thread(t)

    uvicorn.run(
        "chatvoice.webservice:create_app",
        host=CONFIG["host"],
        port=CONFIG["port"],
        workers=CONFIG["workers"],
        factory=True,
        lifespan="off",  # TODO: figure out why it fails when on
        reload=True,
    )  # CONFIG['reload'])


if __name__ == "__main__":
    chatvoice(obj={})
